{
  "hash": "4bf649b2b2c0bb686e6dbb7402065312",
  "result": {
    "engine": "knitr",
    "markdown": "---\ncategories: \"Lab 1\"\nexecute:\n  eval: true\nformat:\n  html:\n    code-link: true #Supposed to create a link to documentation but its not, for some reason.\n   # code-block-bg: true # \"lightblue\" Does not work well with dark mode.\n    code-block-border-left: \"#31BAE9\"\n    code-fold: show #also try true OR false and decide if you like it.\n    code-tools: false\n    code-copy: true\n---\n\n\n\n\n# `Hello, World!` {.unnumbered}\n\nIt is possible that some of you have heard/seen the phrase, `Hello, World!`, before. That is usually the first thing you learn in programming, i.e., to learn to write a computer program to print this sentence to screen. In this course, we will not print `Hello, World!` to the screen. Instead, we will learn how to use R (via RStudio) to perform statistical analyses and to write reports in order to communicate the insights learned from data. While the analysis involves writing computer code, it is in no way going to involve writing computer programs. The goal of today's lab is to introduce you to R and RStudio. You will learn to access and use RStudio, as well as perform the basic functions regarding statistical analysis. To clarify which is which: R is the name of the programming language itself and RStudio is a convenient interface (Integrated Development Environment or IDE) for working with R. I like to think about R as the car engine and RStudio as a nice driver dashboard. The engine drives the car, but the dashboard makes it easier for the driver to control the car. Most R users work with RStudio.\n\n![Car Engine and Dashboard](images/r_vs_rstudio.png)\n\nWe will work with the cloud (online) version of RStudio. \n\n## `Accessing RStudio Cloud` {.unnumbered}\n\nTo access RStudio online, click on the link <https://posit.cloud> to create an account or to sign in if you already have an account.\n\n## Creating a new Project\n\nAfter signing in to R studio, our next step is to create a new project. You can think of a project as a folder or simply a collection of files/files with a specific goal in mind. Our project will be called \"MATH 144 Fall 2025\". The labs that you do will be saved in this project. To create the project, you start by clicking on \"New Project\" and then change the default name (UNTITLED PROJECT) to \"MATH 144 Fall 2025\".\n\nYay! You now have your project ready.\n\nNote that ***you won't have to create a project from scratch every time you open RStudio***. All labs will be done inside this project that we just created.\n\nIn the next section, we explain the meaning of the various panels on your screen.\n\n## The R studio Interface\n\nYour new R studio project interface will look as follows:\n\n![](images/a1.jpeg)\n\n-   ***Left Panel:*** The panel on the left is where the action happens. This panel is called the console. Every time you launch RStudio, it will have the same text at the top of the console telling you the version of R that you're running. Below that information is the symbol \" \\> \". This is where you enter your commands. When you enter and execute a command, the output will come right below it. These commands and their syntax have evolved over decades (literally) and now provide what many users feel is a fairly natural way to access data, organize, describe, and invoke statistical computations. Try typing 1 + 1 in the console and hit enter.\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    1+1\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] 2\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n-   ***Upper Right Panel:*** The panel in the upper right is called \"environment\". It contains, among other things, the history of the actions or commands that you've previously entered.\n\n-   ***Bottom Right Panel:*** The panel in the lower right contains tabs for browsing the files in your project folder, access help files for R functions, install and manage R packages, and inspecting visualizations through the viewer tab. By default, all data visualizations you make will appear directly below the code you used to create them. If you would rather your plots appear in the plots tab, you will need to change your global options.\n\n### Creating a new file\n\nWe want to create a new file (an R script) to write our code. To create a new file, click on the \"File\" menu, then click on \"New File\", and then click on \"R Script\". A new tab will open in the left panel. This is where you will write your code. You can save this file by clicking on the \"File\" menu and then clicking on \"Save\". Save the file as \"lab_1_Explorations\". If you did this correctly, a new file will appear under the files section (lower right) of the project.\n\n\n### Functions and Arguments\n\nIn R, a `function` is piece of code that performs a specific task. Functions take inputs (called arguments) and return outputs. For example, the `mean()` function takes a series of numerical values as the input and returns their average. Try running the following code:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(3,4,5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n:::\n\n\n\n\nThe inputs of a function are called `arguments`. Here, we have three arguments (3, 4, and 5). Note that the arguments are separated by commas.\nThe general syntax for a function is `function_name(argument1, argument2, ...)`. In this case, `mean` is the function name and `3`, `4`, and `5` are the arguments.\n\nYou will learn more about functions and arguments as we progress through the course. For now, it is important to understand that functions are the building blocks of R programming, and they allow you to perform complex tasks with simple commands.\n\n## R packages\n\nR is an open-source programming language, meaning that users can contribute packages that make our lives easier, and we can use them for free. Packages are simply pre-written code meant to serve specific purposes and may contain other packages inside them. Packages may also contain data sets. Packages are stored in a directory called `Library`. For most labs in this course, we will use the following two packages:\n\n-   The **tidyverse package** is a very popular \"umbrella\" package which houses a suite of many different R packages: for data wrangling (including tidying) and data visualization.\n\n-   The **openintro package** for data and custom functions with the openintro resources. You will notice that the readings frequently refer to data contained in the openintro Package. This is the package.\n\n### Installing packages\n\nWe now want to install packages in our project. To install a package in R, we can use the function `install.packages` and the package name as the argument as shown below:\n\n```         \ninstall.packages(\"package name\")\n```\nWe run this command in the console because we only need to install packages once per project. After installing a package, we need to load (activate) it each time we relaunch RStudio.\n\nTo install **tidyverse**, run the following code in the **console**:\n\n``` toml\ninstall.packages(\"tidyverse\")\n```\n\n**Exercise:** What code would you use to install the **openintro** package? Install the package.\n\nNote: To launch (activate) the `tidyverse` package, we use the following command:\n\n``` toml\nlibrary(tidyverse)\n```\n\n***Why Tidyverse?*** We are choosing to use the tidyverse package collection because it consists of a set of packages necessary for different aspects of working with data, anything from loading data to wrangling data to visualizing data to analyzing data. Additionally, these packages share common philosophies and are designed to work together. The tidyverse workflow makes coding feel like a natural language. You can find more about the packages in the tidyverse at tidyverse.org.\n\n## Creating vectors in R\n\nSuppose we want to find the mean of the numbers 23,24,26,19,18,25,21, and 39. You can use the command `mean(23,24,...)`, but this might not be the most efficient way if the list is long. A common thing to do is to create a `container` to put all these numbers. Such a container is known as a `vector`. Specifically, this is a `numerical vector`. See code below for creating a vector consisting of the above list:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(23,24,26,19,18,25,21, 39) \n# We use the symbol '<-' for assigning elements to an object. \n```\n:::\n\n\n\n\nHere, we are creating a vector and storing it in an `object` called `x`. The symbols `<-` is used for assignment. In R, we use a \\# to designate a ***comment*** (text that should not be evaluated as code). In above chunk, the text after \\# is a comment. Comments are a good way to document your code.\n\nTo find the mean of those numbers, we simply run the command `mean(x)` as shown below.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 24.375\n```\n\n\n:::\n:::\n\n\n\n\nTo find the median of the numbers, we run the command `median(x)` as shown below.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmedian(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 23.5\n```\n\n\n:::\n:::\n\n\n\n\nWe can also create a `string object` (i.e., a series of non-numerical elements or characters). We use quotes for string characters. See below:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny <- c( \"Jane\", \"John\", \"Jess\", \"Jeff\", \"Joe\", \"Holli\", \"Henry\", \"Han\") \n# We use quotes for strings.\n```\n:::\n\n\n\n\nNow, try to run the command **mean(y)**:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(y)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in mean.default(y): argument is not numeric or logical: returning NA\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] NA\n```\n\n\n:::\n:::\n\n\n\n\nDid you get an error message in red?\n\nWell, programming languages generally produce error messages when you try to perform an inappropriate operation or if there is a mistake in the code. Error messages are a good way to learn what you did wrong. In this case, the mean/average of the object `y` does not make sense because the entries of `y` are not numerical.\n\nYou can, however, perform other operations on y. For example, you can use the `table` function to tabulate the entries in `y`. This may be useful in cases where one is interested in the frequencies of each entry. Run the command below:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ny\n  Han Henry Holli  Jane  Jeff  Jess   Joe  John \n    1     1     1     1     1     1     1     1 \n```\n\n\n:::\n:::\n\n\n\n\nThis is known as a frequency table. For example, we see that there is only one `Jane` entry in `y`. While you could easily count the number of `Jane` entries in y, the `table` function is useful when you have bigger data sets.\n\nDelete (or comment out) the `mean(y)` that you had written earlier.\n\n## Exercises\n\n1)  Create an object (name it income) containing the following numerical elements: 750, 810, 680, 1200, 1500, 1399,1525.\n\n2)  Use R to find the mean and the median of the values in #1 above.\n\n## Submission\n\n::: callout-important\n### Submission Checklist\n\n-   Attempt all questions\n-   Copy and past your work into a word document. Be sure to number your work properly.\n-   Submit the word document to canvas under Lab 1 Assignment.\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}